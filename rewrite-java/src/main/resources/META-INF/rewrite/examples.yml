# Copyright 2025 the original author or authors.
# <p>
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# <p>
# https://www.apache.org/licenses/LICENSE-2.0
# <p>
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.AddCommentToMethod
examples:
- description: ''
  parameters:
  - SHORT_COMMENT
  - foo.Foo bar(..)
  - 'false'
  sources:
  - before: |
      package foo;
      public class Foo {
          public void bar(String arg) {}
      }
    after: |
      package foo;
      public class Foo {
          // Short comment to add
          public void bar(String arg) {}
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.AddMethodParameter
examples:
- description: ''
  parameters:
  - foo.Foo#bar(..)
  - int
  - i
  - 'null'
  sources:
  - before: |
      package foo;

      public class Foo {
          public void bar() {
          }
      }
    after: |
      package foo;

      public class Foo {
          public void bar(int i) {
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.ChangeMethodInvocationReturnType
examples:
- description: ''
  parameters:
  - java.lang.Integer parseInt(String)
  - long
  sources:
  - before: |
      class Foo {
          void bar() {
              int one = Integer.parseInt("1");
          }
      }
    after: |
      class Foo {
          void bar() {
              long one = Integer.parseInt("1");
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.ChangePackageInStringLiteral
examples:
- description: ''
  parameters:
  - javax.type
  - jakarta.type
  sources:
  - before: |
      class Test {
          String ref = "javax.type.A";
          String extendedRef = "there is a type reference here -> javax.type.A <- hopefully it only replaces that";
      }
    after: |
      class Test {
          String ref = "jakarta.type.A";
          String extendedRef = "there is a type reference here -> jakarta.type.A <- hopefully it only replaces that";
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.ChangeTypeInStringLiteral
examples:
- description: ''
  parameters:
  - javax.type.A
  - jakarta.type.B
  sources:
  - before: |
      class Test {
          String ref = "javax.type.A";
          String refNested = "javax.type.other.A";
          String extendedRef = "there is a type reference here -> javax.type.A <- hopefully it only replaces that";
      }
    after: |
      class Test {
          String ref = "jakarta.type.B";
          String refNested = "javax.type.other.A";
          String extendedRef = "there is a type reference here -> jakarta.type.B <- hopefully it only replaces that";
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.ReplaceAnnotation
examples:
- description: ''
  parameters:
  - '@org.jetbrains.annotations.NotNull("Test")'
  - '@lombok.NonNull'
  - 'null'
  sources:
  - before: |
      import org.jetbrains.annotations.NotNull;

      class A {
          @NotNull("Test")
          String testMethod() {}
      }
    after: |
      import lombok.NonNull;

      class A {
          @NonNull
          String testMethod() {}
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.ReplaceStringLiteralValue
examples:
- description: ''
  parameters:
  - apple
  - orange
  sources:
  - before: |
      class Test {
          String s = "apple";
      }
    after: |
      class Test {
          String s = "orange";
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.search.FindCompileErrors
examples:
- description: ''
  sources:
  - before: |
      class A {
          void test() {
              owner
          }
      }
    after: |
      class A {
          void test() {
              /*~~>*/owner
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.search.HasBuildToolVersion
examples:
- description: ''
  parameters:
  - BuildTool.Type.Maven
  - 3.6.0-3.8.0
  sources:
  - before: class A {}
    after: /*~~>*/class A {}
    language: java
