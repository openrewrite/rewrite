name,displayName,description,category1,category2,category3,category4,option1Name,option1DisplayName,option1Description,option2Name,option2DisplayName,option2Description,option3Name,option3DisplayName,option3Description,option4Name,option4DisplayName,option4Description,option5Name,option5DisplayName,option5Description,option6Name,option6DisplayName,option6Description,ecosystem,packageName,version
org.openrewrite.java.AddCommentToImport,Add comment to import statement,Add a comment to an import statement in a Java source file.,Java,Openrewrite,Org,,comment,Comment,The comment to add.,typePattern,Type pattern,A type pattern that is used to find matching imports uses.,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.AddCommentToMethod,Add comment to method declarations,Add a comment to method declarations in a Java source file.,Java,Openrewrite,Org,,comment,Comment,The comment to add.,methodPattern,Method pattern,"A pattern to match methods to add the comment to. A [method pattern](https://docs.openrewrite.org/reference/method-patterns) is used to find matching method declarations. For example, to find all method declarations in the Guava library, use the pattern: `com.google.common..*#*(..)`.<br/><br/>The pattern format is `<PACKAGE>#<METHOD_NAME>(<ARGS>)`. <br/><br/>`..*` includes all subpackages of `com.google.common`. <br/>`*(..)` matches any method name with any number of arguments. <br/><br/>For more specific queries, like Guava's `ImmutableMap`, use `com.google.common.collect.ImmutableMap#*(..)` to narrow down the results.",isMultiline,Multiline,Comments use by default single line // but they can use multiline /* */.,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.AddCommentToMethodInvocations,Add comment to method invocations,Add a comment to method invocations in a Java source file.,Java,Openrewrite,Org,,comment,Comment,The comment to add.,methodPattern,Method pattern,"A pattern to match methods to add the comment to. A [method pattern](https://docs.openrewrite.org/reference/method-patterns) is used to find matching method invocations. For example, to find all method invocations in the Guava library, use the pattern: `com.google.common..*#*(..)`.<br/><br/>The pattern format is `<PACKAGE>#<METHOD_NAME>(<ARGS>)`. <br/><br/>`..*` includes all subpackages of `com.google.common`. <br/>`*(..)` matches any method name with any number of arguments. <br/><br/>For more specific queries, like Guava's `ImmutableMap`, use `com.google.common.collect.ImmutableMap#*(..)` to narrow down the results.",,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.AddLicenseHeader,Add license header,Adds license headers to Java source files when missing. Does not override existing license headers.,Java,Openrewrite,Org,,licenseText,License text,The license header text without the block comment. May contain ${CURRENT_YEAR} property.,,,,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.AddLiteralMethodArgument,Add a literal method argument,Add a literal `String` or `int` argument to method invocations.,Java,Openrewrite,Org,,methodPattern,Method pattern,"A [method pattern](https://docs.openrewrite.org/reference/method-patterns) is used to find matching method invocations. For example, to find all method invocations in the Guava library, use the pattern: `com.google.common..*#*(..)`.<br/><br/>The pattern format is `<PACKAGE>#<METHOD_NAME>(<ARGS>)`. <br/><br/>`..*` includes all subpackages of `com.google.common`. <br/>`*(..)` matches any method name with any number of arguments. <br/><br/>For more specific queries, like Guava's `ImmutableMap`, use `com.google.common.collect.ImmutableMap#*(..)` to narrow down the results.",argumentIndex,Argument index,A zero-based index that indicates which argument will be added as null to the method invocation.,literal,Literal,The literal value that we add the argument for.,primitiveType,Parameter type,The type of the parameter that we add the argument for. Defaults to `String`.,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.AddMethodParameter,Add method parameter to a method declaration,Adds a new method parameter to an existing method declaration.,Java,Openrewrite,Org,,methodPattern,Method pattern,A method pattern that is used to find the method declarations to modify.,parameterType,Parameter type,The type of the parameter that gets added.,parameterName,Parameter name,The name of the parameter that gets added.,parameterIndex,Parameter index,A zero-based index that indicates the position at which the parameter will be added. At the end by default.,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.AddNullMethodArgument,Add a `null` method argument,Add a `null` argument to method invocations.,Java,Openrewrite,Org,,methodPattern,Method pattern,"A [method pattern](https://docs.openrewrite.org/reference/method-patterns) is used to find matching method invocations. For example, to find all method invocations in the Guava library, use the pattern: `com.google.common..*#*(..)`.<br/><br/>The pattern format is `<PACKAGE>#<METHOD_NAME>(<ARGS>)`. <br/><br/>`..*` includes all subpackages of `com.google.common`. <br/>`*(..)` matches any method name with any number of arguments. <br/><br/>For more specific queries, like Guava's `ImmutableMap`, use `com.google.common.collect.ImmutableMap#*(..)` to narrow down the results.",argumentIndex,Argument index,A zero-based index that indicates which argument will be added as null to the method invocation.,parameterType,Parameter type,The type of the parameter that we add the argument for.,parameterName,Parameter name,The name of the parameter that we add the argument for.,explicitCast,Explicit cast,Explicitly cast the argument to the parameter type. Useful if the method is overridden with another type.,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.AddOrUpdateAnnotationAttribute,Add or update annotation attribute,"Some annotations accept arguments. This recipe sets an existing argument to the specified value, or adds the argument if it is not already set.",Java,Openrewrite,Org,,annotationType,Annotation type,The fully qualified name of the annotation.,attributeName,Attribute name,The name of attribute to change. If omitted defaults to 'value'.,attributeValue,Attribute value,"The value to set the attribute to. If the attribute is an array, provide values separated by comma to add multiple attributes at once. Set to `null` to remove the attribute.",oldAttributeValue,Old Attribute value,"The current value of the attribute, this can be used to filter where the change is applied. Set to `null` for wildcard behavior.",addOnly,Add only,"If `true`, disables upgrading existing annotation attribute values, thus the recipe will only add the attribute if it does not already exist. If omitted or `false`, the recipe adds the attribute if missing or updates its value if present.",appendArray,Append array,"If the attribute is an array and attribute is present, setting this option to `true` will append the value(s). Duplicate values will not be added. If omitted or `false`, the recipe will replace the existing value(s) with the new value(s).",maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.ChangeAnnotationAttributeName,Change annotation attribute name,Some annotations accept arguments. This recipe renames an existing attribute.,Java,Openrewrite,Org,,annotationType,Annotation Type,The fully qualified name of the annotation.,oldAttributeName,Old attribute name,The name of attribute to change.,newAttributeName,New attribute name,The new attribute name to use.,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.ChangeMethodAccessLevel,Change method access level,"Change the access level (public, protected, private, package private) of a method.",Java,Openrewrite,Org,,methodPattern,Method pattern,"A [method pattern](https://docs.openrewrite.org/reference/method-patterns) is used to find matching method invocations. For example, to find all method invocations in the Guava library, use the pattern: `com.google.common..*#*(..)`.<br/><br/>The pattern format is `<PACKAGE>#<METHOD_NAME>(<ARGS>)`. <br/><br/>`..*` includes all subpackages of `com.google.common`. <br/>`*(..)` matches any method name with any number of arguments. <br/><br/>For more specific queries, like Guava's `ImmutableMap`, use `com.google.common.collect.ImmutableMap#*(..)` to narrow down the results.",newAccessLevel,New access level,New method access level to apply to the method.,matchOverrides,Match on overrides,"When enabled, find methods that are overrides of the method pattern.",,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.ChangeMethodInvocationReturnType,Change method invocation return type,Changes the return type of a method invocation.,Java,Openrewrite,Org,,methodPattern,Method pattern,"A [method pattern](https://docs.openrewrite.org/reference/method-patterns) is used to find matching method invocations. For example, to find all method invocations in the Guava library, use the pattern: `com.google.common..*#*(..)`.<br/><br/>The pattern format is `<PACKAGE>#<METHOD_NAME>(<ARGS>)`. <br/><br/>`..*` includes all subpackages of `com.google.common`. <br/>`*(..)` matches any method name with any number of arguments. <br/><br/>For more specific queries, like Guava's `ImmutableMap`, use `com.google.common.collect.ImmutableMap#*(..)` to narrow down the results.",newReturnType,New method invocation return type,The fully qualified new return type of method invocation.,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.ChangeMethodName,Change method name,Rename a method.,Java,Openrewrite,Org,,methodPattern,Method pattern,"A [method pattern](https://docs.openrewrite.org/reference/method-patterns) is used to find matching method invocations. For example, to find all method invocations in the Guava library, use the pattern: `com.google.common..*#*(..)`.<br/><br/>The pattern format is `<PACKAGE>#<METHOD_NAME>(<ARGS>)`. <br/><br/>`..*` includes all subpackages of `com.google.common`. <br/>`*(..)` matches any method name with any number of arguments. <br/><br/>For more specific queries, like Guava's `ImmutableMap`, use `com.google.common.collect.ImmutableMap#*(..)` to narrow down the results.",newMethodName,New method name,The method name that will replace the existing name.,matchOverrides,Match on overrides,"When enabled, find methods that are overrides of the method pattern.",ignoreDefinition,Ignore type definition,When set to `true` the definition of the old type will be left untouched. This is useful when you're replacing usage of a class but don't want to rename it.,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.ChangeMethodTargetToStatic,Change method target to static,Change method invocations to static method calls.,Java,Openrewrite,Org,,methodPattern,Method pattern,"The original method call may or may not be a static method invocation. A [method pattern](https://docs.openrewrite.org/reference/method-patterns) is used to find matching method invocations. For example, to find all method invocations in the Guava library, use the pattern: `com.google.common..*#*(..)`.<br/><br/>The pattern format is `<PACKAGE>#<METHOD_NAME>(<ARGS>)`. <br/><br/>`..*` includes all subpackages of `com.google.common`. <br/>`*(..)` matches any method name with any number of arguments. <br/><br/>For more specific queries, like Guava's `ImmutableMap`, use `com.google.common.collect.ImmutableMap#*(..)` to narrow down the results.",fullyQualifiedTargetTypeName,Fully-qualified target type name,A fully-qualified class name of the type upon which the static method is defined.,returnType,Return type after change,"Sometimes changing the target type also changes the return type. In the Guava example, changing from `ImmutableSet#of(..)` to `Set#of(..)` widens the return type from Guava's `ImmutableSet` to just `java.util.Set`.",matchOverrides,Match on overrides,"When enabled, find methods that are overrides of the method pattern.",matchUnknownTypes,Match unknown types,"When enabled, include method invocations which appear to match if full type information is missing. Using matchUnknownTypes can improve recipe resiliency for an AST with missing type information, but also increases the risk of false-positive matches on unrelated method invocations.",,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.ChangeMethodTargetToVariable,Change method target to variable,Change method invocations to method calls on a variable.,Java,Openrewrite,Org,,methodPattern,Method pattern,"A [method pattern](https://docs.openrewrite.org/reference/method-patterns) is used to find matching method invocations. For example, to find all method invocations in the Guava library, use the pattern: `com.google.common..*#*(..)`.<br/><br/>The pattern format is `<PACKAGE>#<METHOD_NAME>(<ARGS>)`. <br/><br/>`..*` includes all subpackages of `com.google.common`. <br/>`*(..)` matches any method name with any number of arguments. <br/><br/>For more specific queries, like Guava's `ImmutableMap`, use `com.google.common.collect.ImmutableMap#*(..)` to narrow down the results.",variableName,Variable name,Name of variable to use as target for the modified method invocation.,variableType,Variable type,Type attribution to use for the return type of the modified method invocation.,matchOverrides,Match on overrides,"When enabled, find methods that are overrides of the method pattern.",,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.ChangePackage,Rename package name,"A recipe that will rename a package name in package statements, imports, and fully-qualified types.",Java,Openrewrite,Org,,oldPackageName,Old package name,The package name to replace.,newPackageName,New package name,New package name to replace the old package name with.,recursive,Recursive,Recursively change subpackage names,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.ChangePackageInStringLiteral,Rename package name in String literals,A recipe that will rename a package name in String literals.,Java,Openrewrite,Org,,oldPackageName,Old package name,The package name to replace.,newPackageName,New package name,New package name to replace the old package name with.,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.ChangeStaticFieldToMethod,Change static field access to static method access,Migrate accesses to a static field to invocations of a static method.,Java,Openrewrite,Org,,oldClassName,Old class name,The fully qualified name of the class containing the field to replace.,oldFieldName,Old field name,The simple name of the static field to replace.,newClassName,New class name,The fully qualified name of the class containing the method to use. Leave empty to keep the same class.,newTarget,New field target,An optional method target that can be used to specify a static field within the new class.,newMethodName,New method name,The simple name of the method to use. The method must be static and have no arguments.,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.ChangeType,Change type,Change a given type to another.,Java,Openrewrite,Org,,oldFullyQualifiedTypeName,Old fully-qualified type name,Fully-qualified class name of the original type.,newFullyQualifiedTypeName,New fully-qualified type name,"Fully-qualified class name of the replacement type, or the name of a primitive such as ""int"". The `OuterClassName$NestedClassName` naming convention should be used for nested classes.",ignoreDefinition,Ignore type definition,When set to `true` the definition of the old type will be left untouched. This is useful when you're replacing usage of a class but don't want to rename it.,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.ChangeTypeInStringLiteral,Change type in String literals,Change a given type to another when used in a String literal.,Java,Openrewrite,Org,,oldFullyQualifiedTypeName,Old fully-qualified type name,Fully-qualified class name of the original type.,newFullyQualifiedTypeName,New fully-qualified type name,"Fully-qualified class name of the replacement type, or the name of a primitive such as ""int"". The `OuterClassName$NestedClassName` naming convention should be used for nested classes.",,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.DeleteMethodArgument,Delete method argument,Delete an argument from method invocations.,Java,Openrewrite,Org,,methodPattern,Method pattern,"A [method pattern](https://docs.openrewrite.org/reference/method-patterns) is used to find matching method invocations. For example, to find all method invocations in the Guava library, use the pattern: `com.google.common..*#*(..)`.<br/><br/>The pattern format is `<PACKAGE>#<METHOD_NAME>(<ARGS>)`. <br/><br/>`..*` includes all subpackages of `com.google.common`. <br/>`*(..)` matches any method name with any number of arguments. <br/><br/>For more specific queries, like Guava's `ImmutableMap`, use `com.google.common.collect.ImmutableMap#*(..)` to narrow down the results.",argumentIndex,Argument index,A zero-based index that indicates which argument will be removed from the method invocation.,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.InlineMethodCalls,Inline method calls,"Inline method calls using a template replacement pattern. Supports both method invocations and constructor calls, with optional imports.",Java,Openrewrite,Org,,methodPattern,Method pattern,A method pattern that is used to find matching method invocations.,replacement,Replacement template,The replacement template for the method invocation. Parameters can be referenced using their names from the original method.,imports,Imports,List of regular imports to add when the replacement is made.,staticImports,Static imports,List of static imports to add when the replacement is made.,classpathFromResources,Classpath from resources,List of paths to JAR files on the classpath for parsing the replacement template.,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.NoStaticImport,Remove static import,"Removes static imports and replaces them with qualified references. For example, `emptyList()` becomes `Collections.emptyList()`.",Java,Openrewrite,Org,,methodPattern,Method pattern,"A [method pattern](https://docs.openrewrite.org/reference/method-patterns) is used to find matching method invocations. For example, to find all method invocations in the Guava library, use the pattern: `com.google.common..*#*(..)`.<br/><br/>The pattern format is `<PACKAGE>#<METHOD_NAME>(<ARGS>)`. <br/><br/>`..*` includes all subpackages of `com.google.common`. <br/>`*(..)` matches any method name with any number of arguments. <br/><br/>For more specific queries, like Guava's `ImmutableMap`, use `com.google.common.collect.ImmutableMap#*(..)` to narrow down the results.",,,,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.OrderImports,Order imports,"Groups and orders import statements. If a [style has been defined](https://docs.openrewrite.org/concepts-and-explanations/styles), this recipe will order the imports according to that style. If no style is detected, this recipe will default to ordering imports in the same way that IntelliJ IDEA does.",Java,Openrewrite,Org,,removeUnused,Remove unused,Remove unnecessary imports.,,,,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.RandomizeId,Randomize tree IDs,Scramble the IDs. This was intended as a utility to test _en masse_ different techniques for UUID generation and compare their relative performance outside a microbenchmark.,Java,Openrewrite,Org,,,,,,,,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.RecipeMarkupDemonstration,Demonstrate rendering of `Markup` markers,Tooling may decide to elide or display differently markup of different levels.,Java,Openrewrite,Org,,level,Level,The `Markup#Level` to add.,,,,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.RemoveAnnotation,Remove annotation,Remove matching annotations wherever they occur.,Java,Openrewrite,Org,,annotationPattern,Annotation pattern,"An annotation pattern, expressed as a method pattern.",,,,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.RemoveAnnotationAttribute,Remove annotation attribute,Some annotations accept arguments. This recipe removes an existing attribute.,Java,Openrewrite,Org,,annotationType,Annotation Type,The fully qualified name of the annotation.,attributeName,Attribute name,The name of attribute to remove.,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.RemoveImplements,Remove interface implementations,Removes `implements` clauses from classes implementing the specified interface. Removes `@Overrides` annotations from methods which no longer override anything.,Java,Openrewrite,Org,,interfaceType,Interface type,The fully qualified name of the interface to remove.,filter,Filter,Only apply the interface removal to classes with fully qualified names that begin with this filter. `null` or empty matches all classes.,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.RemoveMethodInvocations,Remove method invocations,Remove method invocations if syntactically safe.,Java,Openrewrite,Org,,methodPattern,Method pattern,"A pattern to match method invocations for removal. A [method pattern](https://docs.openrewrite.org/reference/method-patterns) is used to find matching method invocations. For example, to find all method invocations in the Guava library, use the pattern: `com.google.common..*#*(..)`.<br/><br/>The pattern format is `<PACKAGE>#<METHOD_NAME>(<ARGS>)`. <br/><br/>`..*` includes all subpackages of `com.google.common`. <br/>`*(..)` matches any method name with any number of arguments. <br/><br/>For more specific queries, like Guava's `ImmutableMap`, use `com.google.common.collect.ImmutableMap#*(..)` to narrow down the results.",,,,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.RemoveObjectsIsNull,Transform calls to `Objects.isNull(..)` and `Objects.nonNull(..)`,Replace calls to `Objects.isNull(..)` and `Objects.nonNull(..)` with a simple null check. Using these methods outside of stream predicates is not idiomatic.,Java,Openrewrite,Org,,,,,,,,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.RemoveUnusedImports,Remove unused imports,"Remove imports for types that are not referenced. As a precaution against incorrect changes no imports will be removed from any source where unknown types are referenced. The most common cause of unknown types is the use of annotation processors not supported by OpenRewrite, such as lombok.",Java,Openrewrite,Org,,,,,,,,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.ReorderMethodArguments,Reorder method arguments,Reorder method arguments into the specified order.,Java,Openrewrite,Org,,methodPattern,Method pattern,"A [method pattern](https://docs.openrewrite.org/reference/method-patterns) is used to find matching method invocations. For example, to find all method invocations in the Guava library, use the pattern: `com.google.common..*#*(..)`.<br/><br/>The pattern format is `<PACKAGE>#<METHOD_NAME>(<ARGS>)`. <br/><br/>`..*` includes all subpackages of `com.google.common`. <br/>`*(..)` matches any method name with any number of arguments. <br/><br/>For more specific queries, like Guava's `ImmutableMap`, use `com.google.common.collect.ImmutableMap#*(..)` to narrow down the results.",newParameterNames,New parameter names,An array of parameter names that indicates the new order in which those arguments should be arranged.,oldParameterNames,Old parameter names,"If the original method signature is not type-attributed, this is an optional list that indicates the original order in which the arguments were arranged.",ignoreDefinition,Ignore type definition,When set to `true` the definition of the old type will be left untouched. This is useful when you're replacing usage of a class but don't want to rename it.,matchOverrides,Match on overrides,"When enabled, find methods that are overrides of the method pattern.",,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.ReplaceAnnotation,Replace annotation,Replace an Annotation with another one if the annotation pattern matches. Only fixed parameters can be set in the replacement.,Java,Openrewrite,Org,,annotationPatternToReplace,Annotation to replace,"An annotation matcher, expressed as a method pattern to replace.",annotationTemplateToInsert,Annotation template to insert,"An annotation template to add instead of original one, will be parsed with `JavaTemplate`.",classpathResourceName,Classpath resource,If the annotation's type is defined by a jar within the META-INF/rewrite/classpath directory provide its name here so that it can be loaded. When this parameter is not passed the runtime classpath of the recipe is provided to the parser producing the new annotation. This is necessary when the annotation is not on the runtime classpath of the recipe and isn't in the Java standard library.,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.ReplaceConstant,Replace constant with literal value,Replace a named constant with a literal value when you wish to remove the old constant. A `String` literal must include escaped quotes.,Java,Openrewrite,Org,,owningType,Owning type of the constant,The target type in which the constant to be replaced is defined.,constantName,Constant name,The name of the constant field to replace.,literalValue,Literal value,The literal value to replace.,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.ReplaceConstantWithAnotherConstant,Replace constant with another constant,"Replace a constant with another constant, adding/removing import on class if needed.",Java,Openrewrite,Org,,existingFullyQualifiedConstantName,Fully qualified name of the constant to replace,,fullyQualifiedConstantName,Fully qualified name of the constant to use in place of existing constant,,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.ReplaceMethodInvocationWithConstant,Replace method invocation with constant,Replace all method invocations matching the method pattern with the specified constant.,Java,Openrewrite,Org,,methodPattern,Method pattern,"A pattern to match method invocations to replace. A [method pattern](https://docs.openrewrite.org/reference/method-patterns) is used to find matching method invocations. For example, to find all method invocations in the Guava library, use the pattern: `com.google.common..*#*(..)`.<br/><br/>The pattern format is `<PACKAGE>#<METHOD_NAME>(<ARGS>)`. <br/><br/>`..*` includes all subpackages of `com.google.common`. <br/>`*(..)` matches any method name with any number of arguments. <br/><br/>For more specific queries, like Guava's `ImmutableMap`, use `com.google.common.collect.ImmutableMap#*(..)` to narrow down the results.",replacement,Replacement,The constant to replace the method invocation with.,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.ReplaceStringLiteralValue,Replace `String` literal,Replace the value of a complete `String` literal.,Java,Openrewrite,Org,,oldLiteralValue,Old literal `String` value,The `String` value to replace.,newLiteralValue,New literal `String` value,The `String` value to replace with.,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.ReplaceStringLiteralWithConstant,Replace String literal with constant,"Replace String literal with constant, adding import on class if needed.",Java,Openrewrite,Org,,literalValue,String literal value to replace,"The literal that is to be replaced. If not configured, the value of the specified constant will be used by default.",fullyQualifiedConstantName,Fully qualified name of the constant to use in place of String literal,,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.ShortenFullyQualifiedTypeReferences,Add imports for fully qualified references to types,"Any fully qualified references to Java types will be replaced with corresponding simple names and import statements, provided that it doesn't result in any conflicts with other imports or types declared in the local compilation unit.",Java,Openrewrite,Org,,,,,,,,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.SimplifyMethodChain,Simplify a call chain,Simplify `a.b().c()` to `a.d()`.,Java,Openrewrite,Org,,methodPatternChain,Method pattern chain,A list of method patterns that are called in sequence,newMethodName,New method name,The method name that will replace the existing name. The new method name target is assumed to have the same arguments as the last method in the chain.,matchOverrides,Match on overrides,"When enabled, find methods that are overrides of the method pattern.",,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.SimplifySingleElementAnnotation,Simplify single-element annotation,"This recipe will remove the attribute `value` on single-element annotations. According to JLS, a _single-element annotation_, is a shorthand designed for use with single-element annotation types.",Java,Openrewrite,Org,,,,,,,,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.UpdateSourcePositions,Update source positions,Calculate start position and length for every LST element.,Java,Openrewrite,Org,,,,,,,,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.UseStaticImport,Use static import,"Removes unnecessary receiver types from static method invocations. For example, `Collections.emptyList()` becomes `emptyList()`.",Java,Openrewrite,Org,,methodPattern,Method pattern,"A [method pattern](https://docs.openrewrite.org/reference/method-patterns) is used to find matching method invocations. For example, to find all method invocations in the Guava library, use the pattern: `com.google.common..*#*(..)`.<br/><br/>The pattern format is `<PACKAGE>#<METHOD_NAME>(<ARGS>)`. <br/><br/>`..*` includes all subpackages of `com.google.common`. <br/>`*(..)` matches any method name with any number of arguments. <br/><br/>For more specific queries, like Guava's `ImmutableMap`, use `com.google.common.collect.ImmutableMap#*(..)` to narrow down the results.",,,,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.CreateEmptyJavaClass,Create Java class,"Create a new, empty Java class.",Java,Openrewrite,Org,,sourceRoot,Source root,The source root of the new class file.,packageName,Package name,The package of the new class.,modifier,Modifier,The class modifier.,className,Class name,File path of new file.,overwriteExisting,Overwrite existing file,"If there is an existing file, should it be overwritten.",relativePath,Relative directory path,Directory path of new class.,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.AddApache2LicenseHeader,Add ASLv2 license header,Adds the Apache Software License Version 2.0 to Java source files which are missing a license header.,Java,Openrewrite,Org,,,,,,,,,,,,,,,,,,,,yaml,maven-rewrite-yaml:org.openrewrite:rewrite-core:8.64.0-SNAPSHOT!/META-INF/rewrite/apache-license-header.yml,8.64.0-SNAPSHOT
org.openrewrite.java.ai.ClassDefinitionLength,Calculate token length of classes,Locates class definitions and predicts the number of token in each.,AI tools,Java,Openrewrite,Org,,,,,,,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.ai.MethodDefinitionLength,Calculate token length of method definitions,Locates method definitions and predicts the number of token in each.,AI tools,Java,Openrewrite,Org,,,,,,,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.format.AutoFormat,Format Java code,Format Java code using a standard comprehensive set of Java formatting recipes.,Format,Java,Openrewrite,Org,,,,,,,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.format.BlankLines,Blank lines,Add and/or remove blank lines.,Format,Java,Openrewrite,Org,,,,,,,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.format.EmptyNewlineAtEndOfFile,End files with a single newline,Some tools work better when files end with an empty line.,Format,Java,Openrewrite,Org,,,,,,,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.format.MethodParamPad,Method parameter padding,"Fixes whitespace padding between the identifier of a method definition or method invocation and the left parenthesis of the parameter list. For example, when configured to remove spacing, `someMethodInvocation (x);` becomes `someMethodInvocation(x)`.",Format,Java,Openrewrite,Org,,,,,,,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.format.NoWhitespaceAfter,No whitespace after,"Removes unnecessary whitespace appearing after a token. A linebreak after a token is allowed unless `allowLineBreaks` is set to `false`, in which case it will be removed.",Format,Java,Openrewrite,Org,,,,,,,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.format.NoWhitespaceBefore,No whitespace before,Removes unnecessary whitespace preceding a token. A linebreak before a token will be removed unless `allowLineBreaks` is set to `true`.,Format,Java,Openrewrite,Org,,,,,,,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.format.NormalizeFormat,Normalize format,Move whitespace to the outermost LST element possible.,Format,Java,Openrewrite,Org,,,,,,,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.format.NormalizeLineBreaks,Normalize line breaks,Consistently use either Windows style (CRLF) or Linux style (LF) line breaks. If no `GeneralFormatStyle` is specified this will use whichever style of line endings are more common.,Format,Java,Openrewrite,Org,,,,,,,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.format.NormalizeTabsOrSpaces,Normalize to tabs or spaces,Consistently use either tabs or spaces in indentation.,Format,Java,Openrewrite,Org,,,,,,,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.format.PadEmptyForLoopComponents,Pad empty `for` loop components,Fixes padding on empty `for` loop iterators and initializers to match Checkstyle policies.,Format,Java,Openrewrite,Org,,,,,,,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.format.RemoveTrailingWhitespace,Remove trailing whitespace,Remove any extra trailing whitespace from the end of each line.,Format,Java,Openrewrite,Org,,,,,,,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.format.SingleLineComments,Single line comments begin with a whitespace,Write `// hi` instead of `//hi`.,Format,Java,Openrewrite,Org,,,,,,,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.format.Spaces,Spaces,Format whitespace in Java code.,Format,Java,Openrewrite,Org,,,,,,,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.format.TabsAndIndents,Tabs and indents,Format tabs and indents in Java code.,Format,Java,Openrewrite,Org,,,,,,,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.format.TypecastParenPad,Typecast parentheses padding,"Fixes whitespace padding between a typecast type identifier and the enclosing left and right parenthesis. For example, when configured to remove spacing, `( int ) 0L;` becomes `(int) 0L;`.",Format,Java,Openrewrite,Org,,,,,,,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.format.WrappingAndBraces,Wrapping and braces,Format line wraps and braces in Java code.,Format,Java,Openrewrite,Org,,,,,,,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.search.DoesNotUseType,Check whether a type is **not** in use,Useful as a precondition to skip over compilation units using the argument type.,Search,Java,Openrewrite,Org,fullyQualifiedTypeName,Fully-qualified type name,"A fully-qualified type name, that is used to find matching type references. Supports glob expressions. `java..*` finds every type from every subpackage of the `java` package.",includeImplicit,Include implicit type references,"Whether to include implicit type references, such as those in method signatures.",,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.search.FindAnnotations,Find annotations,Find all annotations matching the annotation pattern.,Search,Java,Openrewrite,Org,annotationPattern,Annotation pattern,"An annotation pattern, expressed as a method pattern.",matchMetaAnnotations,Match on meta annotations,"When enabled, matches on meta annotations of the annotation pattern.",,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.search.FindClassHierarchy,Find class hierarchy,"Discovers all class declarations within a project, recording which files they appear in, their superclasses, and interfaces. That information is then recorded in a data table.",Search,Java,Openrewrite,Org,,,,,,,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.search.FindComments,Find within comments and literals,"Find regular expression matches within comments and literals. ""Literals"" includes string literals, character literals, and numeric literals.",Search,Java,Openrewrite,Org,patterns,Text patterns,A list of regular expressions to search for.,,,,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.search.FindCompileErrors,Find compile errors,Compile errors result in a particular LST structure that can be searched for.,Search,Java,Openrewrite,Org,,,,,,,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.search.FindDeprecatedClasses,Find uses of deprecated classes,"Find uses of deprecated classes, optionally ignoring those classes that are inside deprecated scopes.",Search,Java,Openrewrite,Org,typePattern,Type pattern,A type pattern that is used to find matching classes.,matchInherited,Match inherited,"When enabled, find types that inherit from a deprecated type.",ignoreDeprecatedScopes,Ignore deprecated scopes,"When a deprecated type is used in a deprecated method or class, ignore it.",,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.search.FindDeprecatedFields,Find uses of deprecated fields,Find uses of deprecated fields in any API.,Search,Java,Openrewrite,Org,typePattern,Type pattern,A type pattern that is used to find matching field uses.,matchInherited,Match inherited,"When enabled, find types that inherit from a deprecated type.",ignoreDeprecatedScopes,Ignore deprecated scopes,"When a deprecated method is used in a deprecated method or class, ignore it.",,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.search.FindDeprecatedMethods,Find uses of deprecated methods,Find uses of deprecated methods in any API.,Search,Java,Openrewrite,Org,methodPattern,Method pattern,"A [method pattern](https://docs.openrewrite.org/reference/method-patterns) is used to find matching method invocations. For example, to find all method invocations in the Guava library, use the pattern: `com.google.common..*#*(..)`.<br/><br/>The pattern format is `<PACKAGE>#<METHOD_NAME>(<ARGS>)`. <br/><br/>`..*` includes all subpackages of `com.google.common`. <br/>`*(..)` matches any method name with any number of arguments. <br/><br/>For more specific queries, like Guava's `ImmutableMap`, use `com.google.common.collect.ImmutableMap#*(..)` to narrow down the results.",ignoreDeprecatedScopes,Ignore deprecated scopes,When set to `true` deprecated methods used within deprecated methods or classes will be ignored.,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.search.FindDeprecatedUses,"Find uses of deprecated classes, methods, and fields","Find deprecated uses of methods, fields, and types. Optionally ignore those classes that are inside deprecated scopes.",Search,Java,Openrewrite,Org,typePattern,Type pattern,A type pattern that is used to find deprecations from certain types.,matchInherited,Match inherited,"When enabled, find types that inherit from a deprecated type.",ignoreDeprecatedScopes,Ignore deprecated scopes,"When a deprecated type is used in a deprecated method or class, ignore it.",,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.search.FindEmptyClasses,Find empty classes,Find empty classes without annotations that do not implement an interface or extend a class.,Search,Java,Openrewrite,Org,,,,,,,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.search.FindEmptyMethods,Find methods with empty bodies,Find methods with empty bodies and single public no arg constructors.,Search,Java,Openrewrite,Org,matchOverrides,Match on overrides,"When enabled, find methods that are overrides of the method pattern.",,,,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.search.FindFields,Find fields,Find uses of a field.,Search,Java,Openrewrite,Org,fullyQualifiedTypeName,Fully-qualified type name,"A fully-qualified Java type name, that is used to find matching fields.",matchInherited,Match inherited,"When enabled, find types that inherit from a deprecated type.",fieldName,Field name,The name of a field on the type.,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.search.FindFieldsOfType,Find fields of type,Finds declared fields matching a particular class name.,Search,Java,Openrewrite,Org,fullyQualifiedTypeName,Fully-qualified type name,"A fully-qualified Java type name, that is used to find matching fields.",matchInherited,Match inherited,"When enabled, find types that inherit from a deprecated type.",,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.search.FindImplementations,Find implementing classes,"Find class declarations which implement the specified type. If the specified type is a class, its subclasses will be matched. If the specified type is an interface, classes which implement it will be matched.",Search,Java,Openrewrite,Org,typeName,Type name,The fully qualified name to search for.,,,,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.search.FindImports,Find source files with imports,"Locates source files that have imports matching the given type pattern, regardless of whether that import is used in the code.",Search,Java,Openrewrite,Org,typePattern,Type pattern,A type pattern that is used to find matching field uses.,matchInherited,Match inherited,"When enabled, find types that inherit from a deprecated type.",,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.search.FindLiterals,Find literals,Find literals matching a pattern.,Search,Java,Openrewrite,Org,pattern,Pattern,A regular expression pattern to match literals against.,,,,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.search.FindMethodDeclaration,Find method declaration,Locates the declaration of a method.,Search,Java,Openrewrite,Org,methodPattern,Method pattern,"A [method pattern](https://docs.openrewrite.org/reference/method-patterns) is used to find matching method invocations. For example, to find all method invocations in the Guava library, use the pattern: `com.google.common..*#*(..)`.<br/><br/>The pattern format is `<PACKAGE>#<METHOD_NAME>(<ARGS>)`. <br/><br/>`..*` includes all subpackages of `com.google.common`. <br/>`*(..)` matches any method name with any number of arguments. <br/><br/>For more specific queries, like Guava's `ImmutableMap`, use `com.google.common.collect.ImmutableMap#*(..)` to narrow down the results.",matchOverrides,Match on overrides,"When enabled, find methods that are overrides of the method pattern.",,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.search.FindMethods,Find method usages,Find method calls by pattern.,Search,Java,Openrewrite,Org,methodPattern,Method pattern,"A [method pattern](https://docs.openrewrite.org/reference/method-patterns) is used to find matching method invocations. For example, to find all method invocations in the Guava library, use the pattern: `com.google.common..*#*(..)`.<br/><br/>The pattern format is `<PACKAGE>#<METHOD_NAME>(<ARGS>)`. <br/><br/>`..*` includes all subpackages of `com.google.common`. <br/>`*(..)` matches any method name with any number of arguments. <br/><br/>For more specific queries, like Guava's `ImmutableMap`, use `com.google.common.collect.ImmutableMap#*(..)` to narrow down the results.",matchOverrides,Match on overrides,"When enabled, find methods that are overrides of the method pattern.",,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.search.FindMissingTypes,Find missing type information on Java LSTs,This is a diagnostic recipe to highlight where LSTs are missing type attribution information.,Search,Java,Openrewrite,Org,checkDocumentation,Check documentation,When set to `true` any references in documentation (i.e. Javadoc for Java) will also be checked. Default is `false`.,,,,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.search.FindRepeatableAnnotations,Find uses of `@Repeatable` annotations,Java 8 introduced the concept of `@Repeatable` annotations.,Search,Java,Openrewrite,Org,,,,,,,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.search.FindTypes,Find types,Find type references by name.,Search,Java,Openrewrite,Org,fullyQualifiedTypeName,Fully-qualified type name,"A fully-qualified type name, that is used to find matching type references. Supports glob expressions. `java..*` finds every type from every subpackage of the `java` package.",checkAssignability,Check for assignability,"When enabled, find type references that are assignable to the provided type.",,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.search.HasBuildToolVersion,Find files with a particular build tool version,Finds Java source files built with a particular build tool. This is useful especially as a precondition for other recipes.,Search,Java,Openrewrite,Org,type,Build tool type,The build tool to search for.,version,Build tool version,An exact version number or node-style semver selector used to select the version number.,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.search.HasJavaVersion,Find files compiled at a specific Java version,Finds Java source files matching a particular language level. This is useful especially as a precondition for other recipes.,Search,Java,Openrewrite,Org,version,Java version,An exact version number or node-style semver selector used to select the version number.,checkTargetCompatibility,Version check against target compatibility,The source and target compatibility versions can be different. This option allows you to check against the target compatibility version instead of the source compatibility version.,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.search.HasMethod,Find files that have at least one use of a method,Marks files that have at least one occurrence of a method matching a pattern.,Search,Java,Openrewrite,Org,methodPattern,Method pattern,"A [method pattern](https://docs.openrewrite.org/reference/method-patterns) is used to find matching method invocations. For example, to find all method invocations in the Guava library, use the pattern: `com.google.common..*#*(..)`.<br/><br/>The pattern format is `<PACKAGE>#<METHOD_NAME>(<ARGS>)`. <br/><br/>`..*` includes all subpackages of `com.google.common`. <br/>`*(..)` matches any method name with any number of arguments. <br/><br/>For more specific queries, like Guava's `ImmutableMap`, use `com.google.common.collect.ImmutableMap#*(..)` to narrow down the results.",matchOverrides,Match on overrides,"When enabled, find methods that are overrides of the method pattern.",,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.search.HasSourceSet,Find files in a source set,"Source sets are a way to organize your source code into logical groups. For example, Java projects commonly have a `main` source set for application code and a `test` source set for test code. This recipe will find all files in a given source set.",Search,Java,Openrewrite,Org,sourceSet,Source set,The source set to search for.,,,,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.search.HasType,Find files that have at least one use of a type,"Marks files that have at least one occurrence of a type, even if the name of that type doesn't appear in the source code.",Search,Java,Openrewrite,Org,fullyQualifiedTypeName,Fully-qualified type name,"A fully-qualified type name, that is used to find matching type references. Supports glob expressions. `java..*` finds every type from every subpackage of the `java` package.",checkAssignability,Check for assignability,"When enabled, find type references that are assignable to the provided type.",,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.search.IsLikelyNotTest,Find files that are likely not tests,"Sources that do not contain indicators of being, or being exclusively for the use in tests. This recipe is simply a negation of the `org.openrewrite.java.search.IsLikelyTest` recipe.",Search,Java,Openrewrite,Org,,,,,,,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.search.IsLikelyTest,Find sources that are likely tests,"Sources that contain indicators of being, or being exclusively for the use in tests. This recipe is not exhaustive, but is intended to be a good starting point for finding test sources. Looks at the source set name, and types in use; for example looks for uses of JUnit & TestNG annotations/assertions.",Search,Java,Openrewrite,Org,,,,,,,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.search.ResultOfMethodCallIgnored,Result of method call ignored,Find locations where the result of the method call is being ignored.,Search,Java,Openrewrite,Org,methodPattern,Method pattern,"A [method pattern](https://docs.openrewrite.org/reference/method-patterns) is used to find matching method invocations. For example, to find all method invocations in the Guava library, use the pattern: `com.google.common..*#*(..)`.<br/><br/>The pattern format is `<PACKAGE>#<METHOD_NAME>(<ARGS>)`. <br/><br/>`..*` includes all subpackages of `com.google.common`. <br/>`*(..)` matches any method name with any number of arguments. <br/><br/>For more specific queries, like Guava's `ImmutableMap`, use `com.google.common.collect.ImmutableMap#*(..)` to narrow down the results.",matchOverrides,Match on overrides,"When enabled, find methods that are overrides of the method pattern.",,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.search.ClasspathTypeCounts,Study the size of the classpath by source set,"Emit one data table row per source set in a project, with the number of types in the source set.",Search,Java,Openrewrite,Org,,,,,,,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.search.FindDistinctMethods,Find distinct methods in use,"A sample of every distinct method in use in a repository. The code sample in the method calls data table will be a representative use of the method, though there may be many other such uses of the method.",Search,Java,Openrewrite,Org,methodPattern,Method pattern,"A [method pattern](https://docs.openrewrite.org/reference/method-patterns) is used to find matching method invocations. For example, to find all method invocations in the Guava library, use the pattern: `com.google.common..*#*(..)`.<br/><br/>The pattern format is `<PACKAGE>#<METHOD_NAME>(<ARGS>)`. <br/><br/>`..*` includes all subpackages of `com.google.common`. <br/>`*(..)` matches any method name with any number of arguments. <br/><br/>For more specific queries, like Guava's `ImmutableMap`, use `com.google.common.collect.ImmutableMap#*(..)` to narrow down the results.",matchOverrides,Match on overrides,"When enabled, find methods that are overrides of the method pattern.",,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.search.FindTypeMappings,Find type mappings,Study the frequency of `J` types and their `JavaType` type attribution.,Search,Java,Openrewrite,Org,,,,,,,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.search.HasMinimumJavaVersion,Find the oldest Java version in use,"The oldest Java version in use is the lowest Java version in use in any source set of any subproject of a repository. It is possible that, for example, the main source set of a project uses Java 8, but a test source set uses Java 17. In this case, the oldest Java version in use is Java 8.",Search,Java,Openrewrite,Org,version,Java version,An exact version number or node-style semver selector used to select the version number.,checkTargetCompatibility,Version check against target compatibility,The source and target compatibility versions can be different. This option allows you to check against the target compatibility version instead of the source compatibility version.,,,,,,,,,,,,,maven,org.openrewrite:rewrite-core,8.64.0-SNAPSHOT
org.openrewrite.java.search.FindSecrets,Find plain text secrets,Find secrets stored in plain text in code.,Search,Java,Openrewrite,Org,,,,,,,,,,,,,,,,,,,yaml,maven-rewrite-yaml:org.openrewrite:rewrite-core:8.64.0-SNAPSHOT!/META-INF/rewrite/find-plaintext-secrets.yml,8.64.0-SNAPSHOT
